# use/no statements

use strict;
no strict;
use Foo::Package;
use Foo::Package qw(import1 import2);
use Foo::Package 'BasePackage', -option;
use constant MESSAGE => 'hello';
use if $] < 5.008, "utf8";
use if WANT_WARNINGS, warnings => qw(all);
use Exception::Class ('Package::Ex' => { description => 'error' });
use v5.38;
use 5.12.0;
use parent qw(Parent::Package);
use base qw(Base::Package);

==>

Program(
    UseNoStatement(use, PackageName(Identifier), StatementEnd(";")),
    UseNoStatement(no, PackageName(Identifier), StatementEnd(";")),
    UseNoStatement(use, PackageName(Identifier, "::", Identifier), StatementEnd(";")),
    UseNoStatement(
        use,
        PackageName(Identifier, "::", Identifier),
        Arguments(QWList(qw, QWListContent(QuoteLikeStartDelimiter, QWElement, QWElement, QuoteLikeEndDelimiter))),
        StatementEnd(";")
    ),
    UseNoStatement(
        use,
        PackageName(Identifier, "::", Identifier),
        Arguments(StringSingleQuoted, Comma, Option),
        StatementEnd(";")
    ),
    UseConstantStatement(use, constant, Constant(Identifier), FatComma, StringSingleQuoted, StatementEnd(";")),
    UseNoIfStatement(
        use,
        if,
        BinaryExpression(SpecialScalarVariable, CompareOp, Float),
        Comma,
        StringDoubleQuoted(InterpolatedStringContent),
        StatementEnd(";")
    ),
    UseNoIfStatement(
        use,
        if,
        Constant(Identifier),
        Comma,
        PackageName(Identifier),
        FatComma,
        Arguments(QWList(qw, QWListContent(QuoteLikeStartDelimiter, QWElement, QuoteLikeEndDelimiter))),
        StatementEnd(";")
    ),
    UseNoStatement(
        use,
        PackageName(Identifier, "::", Identifier),
        ParenthesizedArguments(
            "(",
            StringSingleQuoted,
            FatComma,
            HashRef("{", Pair(Identifier, FatComma, StringSingleQuoted), "}"),
            ")"
        ),
        StatementEnd(";")
    ),
    UseNoVersion(use, Version, StatementEnd(";")),
    UseNoVersion(use, Version, StatementEnd(";")),
    UseParentOrBaseStatement(
        use,
        parent,
        QWList(qw, QWListContent(QuoteLikeStartDelimiter, QWElement, QuoteLikeEndDelimiter)),
        StatementEnd(";")
    ),
    UseParentOrBaseStatement(
        use,
        base,
        QWList(qw, QWListContent(QuoteLikeStartDelimiter, QWElement, QuoteLikeEndDelimiter)),
        StatementEnd(";")
    )
)
